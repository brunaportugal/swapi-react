{"version":3,"sources":["fonts/Starjedi.ttf","components/Navbar.js","components/Films.js","components/Film.js","components/Character.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","Menu","inverted","Container","to","Item","name","Films","data","favoriteFilms","toggleFavoriteFilm","Grid","columns","map","film","i","isFavoriteFilm","includes","episode_id","Column","pathname","state","className","src","alt","title","onClick","Film","location","useLocation","console","log","numberPattern","characterIds","characters","character","match","useState","setCharacters","useEffect","a","Promise","all","id","fetch","res","json","characterData","characterInfo","fetchCharacters","Character","favoriteCharacters","toggleFavoriteCharacter","isFavoriteCharacter","App","films","setFilms","results","fetchFilms","setFavoriteFilms","setFavoriteCharacters","exact","path","newFavoriteFilms","filter","f","newFavoriteCharacters","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c447717.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Starjedi.8d577dc1.ttf\";","import React from 'react';\nimport { Menu, Container } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nexport default function Navbar() {\n  return (\n    <Menu inverted>\n      <Container>\n        <Link to='/' >\n          <Menu.Item name=\"films\" />\n        </Link>\n        <Link to='/characters'>\n          <Menu.Item name=\"characters\" />\n        </Link>\n      </Container>\n    </Menu>\n  );\n}\n","import React from 'react';\nimport { Grid, Menu, Container } from 'semantic-ui-react';\nimport { Link, Route } from 'react-router-dom';\n\nexport default function Films({ data, favoriteFilms, toggleFavoriteFilm }) {\n  return (\n    <>\n      <h1>Films</h1>\n      <Grid columns={1}>\n        {data.map((film, i) => {\n          const isFavoriteFilm = favoriteFilms.includes(film.episode_id);\n          return (\n            <Grid.Column key={i}>\n              <Link to={{\n                pathname: `/film/${film.episode_id}`,\n                state: film\n              }} >\n                <img className=\"films-images\" src={`../films/${film.episode_id}.jpg`} alt=\"\"></img>\n              </Link>\n              <h3>{film.title}</h3>\n              <button onClick={ () => toggleFavoriteFilm(film.episode_id) }>{isFavoriteFilm ? \"Favorite\" : \"Not Favorite\"}</button>\n            </Grid.Column>\n          )\n        })}\n      </Grid>\n    </>\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Menu, Container } from 'semantic-ui-react';\nimport { Link, Route, useLocation } from 'react-router-dom';\n\nexport default function Film() {\n  const location = useLocation();\n  console.log(location);\n  const film = location.state;\n  console.log(film);\n\n  const numberPattern = /\\d+/;\n\n  const characterIds = film.characters.map(character => character.match( numberPattern )[0]);\n  console.log(characterIds);\n\n\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(() => {\n    async function fetchCharacters() {\n      const characterInfo = await Promise.all(characterIds.map(async id => {\n        let res = await fetch(`https://swapi.dev/api/people/${id}/`);\n        let characterData = await res.json();\n        characterData.id = id;\n        return characterData;\n      }))\n      setCharacters(characterInfo);\n      console.log(characterInfo);\n    }\n\n    fetchCharacters();\n  }, [])\n\n  return (\n    <>\n      <h1>{film.title}</h1>\n      <Grid columns={1}>\n        <Grid.Column>\n          <img className=\"films-images\" src={`../films/${film.episode_id}.jpg`} alt=\"\"></img>\n          <Grid.Column columns={2}>\n            <ul>\n              {characters.map(character =>\n                <li>\n                <Link to={{\n                  pathname: `/character/${character.id}`,\n                  state: character\n                }}>\n                  <img className=\"avatar\" src={`../characters/${character.id}.jpg`} alt=\"\"></img>\n                </Link>\n                  {character.name}\n                </li>)}\n            </ul>\n          </Grid.Column>\n        </Grid.Column>\n      </Grid>\n    </>\n  )\n}\n","import React from 'react';\nimport { Grid, Menu, Container } from 'semantic-ui-react';\nimport { Link, Route, useLocation } from 'react-router-dom';\nimport Films from \"./Films.js\";\nimport Film from \"./Film.js\";\n\nexport default function Character({ favoriteCharacters, toggleFavoriteCharacter }) {\n  const location = useLocation();\n  console.log(location);\n  const character = location.state;\n  console.log(character);\n  const isFavoriteCharacter = favoriteCharacters.includes(character.id);\n\n  return (\n    <>\n      <img className=\"films-images\" src={`../characters/${character.id}.jpg`} alt=\"\"></img>\n      <h1>{character.name}</h1>\n      <button onClick={ () => toggleFavoriteCharacter(character.id) }>{isFavoriteCharacter ? \"Favorite\" : \"Not Favorite\"}</button>\n    </>\n\n    );\n\n  // return (\n  //   <>\n  //     <h1>{character.name}</h1>\n  //     <Grid columns={1}>\n  //       <Grid.Column>\n  //         <Link to={`/character/${character.id}`}>\n  //           <img className=\"films-images\" src={`../films/${character.id}.jpg`} alt=\"\"></img>\n  //         </Link>\n  //         <ul>\n  //           {character.map(character =>\n  //             <li>\n  //               <img className=\"avatar\" src={`../characters/${character.id}.jpg`} alt=\"\"></img>\n  //               {character.name}\n  //             </li>)}\n  //         </ul>\n  //       </Grid.Column>\n  //     </Grid>\n  //   </>\n  // )\n}\n","import React, { useState, useEffect } from 'react';\nimport Navbar from \"./components/Navbar.js\";\nimport Films from \"./components/Films.js\";\nimport Film from \"./components/Film.js\";\nimport Character from \"./components/Character.js\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\nimport './index.css';\n\nfunction App() {\n  const [films, setFilms] = useState([]);\n\n  useEffect(() => {\n    async function fetchFilms() {\n      let res = await fetch('https://swapi.dev/api/films/?format=json');\n      let data = await res.json();\n      console.log(data);\n      setFilms(data.results);\n    }\n\n    fetchFilms();\n  }, [])\n\n  const [favoriteFilms, setFavoriteFilms] = useState([]);\n\n  const toggleFavoriteFilm = (episode_id) => {\n    if (favoriteFilms.includes(episode_id)) {\n      const newFavoriteFilms = favoriteFilms.filter(f => f !== episode_id);\n      setFavoriteFilms(newFavoriteFilms);\n    } else {\n      const newFavoriteFilms = [...favoriteFilms, episode_id];\n      setFavoriteFilms(newFavoriteFilms);\n    }\n  };\n\n  const [favoriteCharacters, setFavoriteCharacters] = useState([]);\n\n  const toggleFavoriteCharacter = (id) => {\n    if (favoriteCharacters.includes(id)) {\n      const newFavoriteCharacters = favoriteCharacters.filter(f => f !== id);\n      setFavoriteCharacters(newFavoriteCharacters);\n    } else {\n      const newFavoriteCharacters = [...favoriteCharacters, id];\n      setFavoriteCharacters(newFavoriteCharacters);\n    }\n  };\n\n  const [loading, setLoading] = useState(true);\n\n\n\n  return (\n    <>\n      <Router>\n        <Navbar />\n        <Container>\n          <Switch>\n            <Route exact path='/'>\n              <Films data={films} favoriteFilms={favoriteFilms} toggleFavoriteFilm={toggleFavoriteFilm}/>\n            </Route>\n            <Route path='/film/:id'>\n              <Film data={films}/>\n            </Route>\n            <Route path='/character/:id'>\n              <Character favoriteCharacters={favoriteCharacters} toggleFavoriteCharacter={toggleFavoriteCharacter}/>\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './fonts/Starjedi.ttf';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}